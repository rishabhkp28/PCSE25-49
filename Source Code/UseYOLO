pip install ultralytics

#Yoloing images
from ultralytics import YOLO
import cv2
import numpy as np
import os
import logging

# Load the YOLO model
model = YOLO('yolov8n.pt')

# Set logging level to suppress YOLO model output
logging.getLogger('ultralytics').setLevel(logging.ERROR)

def detect_and_crop_largest_person(image_path, save_path):
    # Load the image
    image = cv2.imread(image_path)

    # Check if the image was loaded successfully
    if image is None:
        print(f"Error: Could not load image at path: {image_path}")
        return

    # Predict using the YOLO model
    results = model.predict(source=image, device=0)

    # Extract results after suppressing output
    boxes = results[0].boxes
    
    # Get image dimensions
    height, width, _ = image.shape
    center_x, center_y = width // 2, height // 2

    best_box = None
    best_score = 0

    for box in boxes:
        # Check if the detected class is 'person'
        if box.cls == 0:
            x1, y1, x2, y2 = map(int, box.xyxy[0].tolist())
            area = (x2 - x1) * (y2 - y1)

            box_center_x = (x1 + x2) / 2
            box_center_y = (y1 + y2) / 2
            
            distance_from_center = np.sqrt((box_center_x - center_x) ** 2 + (box_center_y - center_y) ** 2)
            score = area / (1 + distance_from_center)

            if score > best_score:
                best_score = score
                best_box = (x1, y1, x2, y2)

    # Crop and save the best bounding box area
    if best_box is not None:
        x1, y1, x2, y2 = best_box
        cropped_person = image[y1:y2, x1:x2]
        cv2.imwrite(save_path, cropped_person)
#yoloing images
import shutil
output = "/kaggle/working/working2/"
archive_path = "/kaggle/working/working3/"
dataset = "/kaggle/input/ucf101extracted"
countactivity = 1


for activity in os.listdir(dataset):
    videos_link = os.path.join(dataset, activity)
    output_path = os.path.join(output,activity)
    if not os.path.exists(output_path):
        os.makedirs(output_path)

    countvideo = 1
    print(f'Processing activity {countactivity}')
    countactivity += 1
    for video in os.listdir(videos_link):
        video_link = os.path.join(videos_link, video)
        video_output_path = os.path.join(output_path, video)
        if not os.path.exists(video_output_path):
            os.makedirs(video_output_path)
        print(f'Processing video {countvideo}')
        countvideo += 1
        for frame in os.listdir(video_link):
            image_path = os.path.join(video_link, frame)
            save_path = os.path.join(video_output_path, frame)

            # Crop and save the area of interest (subject only)
            detect_and_crop_largest_person(image_path, save_path)

        to_archive = os.path.join(f'/kaggle/working/working2/{activity}')
        # Create a zip archive of the folder
        shutil.make_archive(f"/kaggle/working/working3/{activity}", 'zip',to_archive) 
